#!/usr/bin/env python
# -*- coding: utf-8 -*-

import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import json
import os


with open('config.json', 'r') as file:
    config = json.load(file)


API_TOKEN = config['api_key']
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_file(message: types.Message):
    filename = '–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–æ–ª–æ–≥–∏–π.pdf'
    file_path = os.path.join(os.path.dirname(__file__), filename)
    with open('introduce.txt', 'r', encoding='utf-8') as text:
        await message.answer(text.read())

    msg = await message.answer(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: ‚¨ú‚¨ú‚¨ú")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    async def upload_file():
        try:
            with open(file_path, 'rb') as file:
                await bot.send_document(chat_id=message.chat.id, document=file)
        except Exception as e:
            await msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–¥—É /start –µ—â–µ —Ä–∞–∑ ")

    async def update_progress():
        text = "‚¨ú‚¨ú‚¨ú"
        while True:
            if msg.text.count('‚¨ú') < 3:
                break
            next_text = text.replace('‚¨ú', 'üü©', 1)
            if next_text != text:
                text = next_text
                await msg.edit_text(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: {text}")
            await asyncio.sleep(1)

    upload_task = asyncio.create_task(upload_file())
    progress_task = asyncio.create_task(update_progress())

    await upload_task
    await msg.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ú–∞–π–∫–ª–∞ –î–∂–µ–∫—Å–æ–Ω–∞? –ñ–º–∏—Ç–µ /review")
    await progress_task


@dp.message_handler(commands=["review"])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    await message.answer('–•–æ—á—É –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Ç–µ–±—è —Å —Ä–∞–∑–±–æ—Ä–æ–º –ú–∞–π–∫–ª–∞ –î–∂–µ–∫—Å–æ–Ω–∞, —á—Ç–æ–±—ã —É —Ç–µ–±—è –±—ã–ª–æ '
                               '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—Ä–æ–µ—Ç –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ')

    button1 = types.KeyboardButton(text="–î–∞–ª–µ–µ")
    keyboard.add(button1)

    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–±–æ—Ä", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '–î–∞–ª–µ–µ')
async def send_long_text_with_photo(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button2 = types.KeyboardButton(text="–î–∞–ª–µe")
    keyboard.add(button2)

    photo_path = "MJ.jpg"

    with open(photo_path, 'rb') as photo:
        await message.answer_photo(photo)

    with open('michael_jackson.txt', 'r', encoding='utf-8') as text:
        await message.answer(text.read())

    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '–î–∞–ª–µe')
async def handle_another_button(message: types.Message):

    with open('link.txt', 'r', encoding='utf-8') as text:
        link = text.read()

    keyboard = types.ReplyKeyboardRemove()
    await message.answer(link, reply_markup=keyboard)

if __name__ == '__main__':
    executor.start_polling(dp)